import logging
import os

from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
)
from telegram.utils.request import Request
from telegram import Bot
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from django.core.management.base import BaseCommand

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

request = Request(connect_timeout=0.5, read_timeout=1.0)
bot = Bot(
    request=request,
    token=TELEGRAM_TOKEN,
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


GAME, GAME_TITLE, COST, COST_LIMIT, REG_DATE, GIFTS_DATE, CREATE_GAME, CHECK_CODE = range(8)

def chunks_generators(buttons, chunks_number):
    for button in range(0, len(buttons), chunks_number):
        yield buttons[button : button + chunks_number]


def keyboard_maker(buttons, number):
    keyboard = list(chunks_generators(buttons, number))
    markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=True
    )
    return markup


def start(update, context):
    user = update.message.from_user
    text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}!
        –û—Ä–≥–∞–Ω–∏–∑—É–π —Ç–∞–π–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏, 
        –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"""
    buttons = ["–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"]
    caption = "–•–æ—É-—Ö–æ—É-—Ö–æ—É üéÖ"
    markup = keyboard_maker(buttons, 1)
    bot.send_photo(
        chat_id=update.message.chat_id,
        photo="https://d298hcpblme28l.cloudfront.net/products/72dee529da636fedbb8bce04f204f75d_resize.jpg",
        caption=caption,
        parse_mode="HTML",
    )
    update.message.reply_text(text, reply_markup=markup)
    return GAME


def choose_game(update, context):
    user_message = update.message.text
    if user_message == "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É":
        update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–≥—Ä—ã")
        return GAME_TITLE
    elif user_message == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–≥—Ä—ã")
        return CHECK_CODE


def check_code(update, context):
    user = update.message.from_user
    update.message.reply_text("–¢–∞–∫–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    text, markup = get_menu(user)
    update.message.reply_text(text, reply_markup=markup)
    return GAME


def get_game_title(update, context):
    user_message = update.message.text
    context.user_data["game_title"] = user_message
    buttons = ["–î–∞", "–ù–µ—Ç"]
    markup = keyboard_maker(buttons, 2)
    text = "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞: –¥–∞/–Ω–µ—Ç?"
    update.message.reply_text(text, reply_markup=markup)
    return COST


def choose_cost(update, context):
    user_message = update.message.text
    if user_message == "–î–∞":
        context.user_data["cost_limit"] = True
        buttons = ["–¥–æ 500 —Ä—É–±–ª–µ–π", "500-1000 —Ä—É–±–ª–µ–π", "1000-2000 —Ä—É–±–ª–µ–π"]
        markup = keyboard_maker(buttons, 1)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä '3000-7000 —Ä—É–±–ª–µ–π'"
        update.message.reply_text(text, reply_markup=markup)
        return COST_LIMIT
    elif user_message == "–ù–µ—Ç":
        context.user_data["cost_limit"] = False
        text = "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä '–¥–æ 25.12.2021'"
        update.message.reply_text(text)
        return REG_DATE


def get_cost_limit(update, context):
    user_message = update.message.text
    context.user_data["cost"] = user_message
    text = "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä '–¥–æ 25.12.2021'"
    update.message.reply_text(text)
    return REG_DATE


def get_reg_date(update, context):
    user_message = update.message.text
    context.user_data["reg_date"] = user_message
    text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '31.12.2021'"
    update.message.reply_text(text)
    return GIFTS_DATE


def get_gifts_date(update, context):
    user_message = update.message.text
    context.user_data["gifts_date"] = user_message
    if not context.user_data.get("cost_limit"):
        context.user_data["cost"] = "–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    text = f"""–í–∞—à–∞ –∏–≥—Ä–∞:
               –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data.get("game_title")}
               –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {context.user_data.get("cost")} 
               –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {context.user_data.get("reg_date")}
               –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤: {context.user_data.get("gifts_date")}"""
    update.message.reply_text(text)
    buttons = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
    markup = keyboard_maker(buttons, 2)
    update.message.reply_text("–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ –∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                              reply_markup=markup)
    return CREATE_GAME


def create_game(update, context):
    user_message = update.message.text
    if user_message == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        user = update.message.from_user
        text = "–û—Ç–ª–∏—á–Ω–æ, –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–∞–∑–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–æ–≤!"
        update.message.reply_text(text)
        update.message.reply_text("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ")
        text = "–ü—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞. –ü—Ä–∏—Ö–æ–¥–∏ –Ω–∞ –±–æ—Ç @SecretSanta –Ω–∞–∂–∏–º–∞–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ, –≤–≤–µ–¥–∏ –∫–æ–¥ 3648432, –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±–æ—Ç–∞"
        update.message.reply_text(text)
        return COST_LIMIT
    elif user_message == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        user = update.message.from_user
        text, markup = get_menu(user)
        update.message.reply_text(text, reply_markup=markup)
        return GAME


def get_menu(user):
    text = f"""–ü—Ä–∏–≤–µ—Ç, {user.first_name}!
                –û—Ä–≥–∞–Ω–∏–∑—É–π —Ç–∞–π–Ω—ã–π –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏, 
                –∑–∞–ø—É—Å—Ç–∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!"""
    buttons = ["–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ"]
    markup = keyboard_maker(buttons, 1)
    return text, markup


def cancel(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    update.message.reply_text(
        '–ú–æ–µ –¥–µ–ª–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å - –í–∞—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
        ' –ë—É–¥–µ—Ç —Å–∫—É—á–Ω–æ - –ø–∏—à–∏.',
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


class Command(BaseCommand):
    """Start the bot."""
    help = "–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç"

    def handle(self, *args, **options):
        updater = Updater(token=TELEGRAM_TOKEN)

        dispatcher = updater.dispatcher
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                GAME: [MessageHandler(Filters.text, choose_game)],
                GAME_TITLE: [MessageHandler(Filters.text, get_game_title)],
                COST: [MessageHandler(Filters.text, choose_cost)],
                COST_LIMIT: [MessageHandler(Filters.text, get_cost_limit)],
                REG_DATE: [MessageHandler(Filters.text, get_reg_date)],
                GIFTS_DATE: [MessageHandler(Filters.text, get_gifts_date)],
                CREATE_GAME: [MessageHandler(Filters.text, create_game)],
                CHECK_CODE: [MessageHandler(Filters.text, check_code)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        dispatcher.add_handler(conv_handler)

        updater.start_polling()
        updater.idle()
